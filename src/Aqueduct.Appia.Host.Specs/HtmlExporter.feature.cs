// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Aqueduct.Appia.Host.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExportAsHtmlFeature : Xunit.IUseFixture<ExportAsHtmlFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HtmlExporter.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Export as html", "As a Front end developer\nI want to create a flat representation of my work\nSo I c" +
                    "an submit it to the client or send it to my fellow backend developers", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(ExportAsHtmlFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Create export folder")]
        public virtual void CreateExportFolder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create export folder", new string[] {
                        "init"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a export path");
#line 9
 testRunner.When("I initialise the exporter");
#line 10
 testRunner.Then("an export folder is created");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Delete export foldre if already exists")]
        public virtual void DeleteExportFoldreIfAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete export foldre if already exists", new string[] {
                        "init"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have an export folder");
#line 15
 testRunner.And("I have an export path pointing to the same export folder");
#line 16
 testRunner.When("I initialise the exporter");
#line 17
 testRunner.Then("a new empty export folder is created in place of the old one");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Export pages")]
        public virtual void ExportPages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export pages", new string[] {
                        "export"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have page.cshtml in the pages folder");
#line 22
 testRunner.When("I export the site");
#line 23
 testRunner.Then("I have page.html in the export folder");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Export all pages")]
        public virtual void ExportAllPages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export all pages", new string[] {
                        "export"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have 4 pages");
#line 28
 testRunner.When("I export");
#line 29
 testRunner.Then("I have 4 html files in the export directory");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Export layouts")]
        public virtual void ExportLayouts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export layouts", new string[] {
                        "export"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have page \"page_with_layout.cshtml\"");
#line 34
 testRunner.And("it uses layout \"layout.cshtml\"");
#line 35
 testRunner.When("I export");
#line 36
 testRunner.Then("I have html page \"page_with_layout.html\"");
#line 37
 testRunner.And("\"page_with_layout.html\" contains html content from layout \"layout.cshtml\"");
#line 38
 testRunner.And("\"page_with_layout.html\" contains html content from page \"page_with_layout.cshtml\"" +
                    "");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Export partials")]
        public virtual void ExportPartials()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export partials", new string[] {
                        "export"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have page \"page_with_partial.cshtml\"");
#line 43
 testRunner.And("it uses partial \"partial.cshtml\"");
#line 44
 testRunner.When("I export");
#line 45
 testRunner.Then("I have html page \"page_with_partial.html\"");
#line 46
 testRunner.And("\"page_with_partial.html\" contains html content from partial \"partial.cshtml\"");
#line 47
 testRunner.And("\"page_with_partial.html\" contains html content from page \"page_with_partial.cshtm" +
                    "l\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Copy static files")]
        public virtual void CopyStaticFiles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Copy static files", new string[] {
                        "export"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I have css folder with 3 files");
#line 53
 testRunner.And("I have js folder with 3 files");
#line 54
 testRunner.When("I export");
#line 55
 testRunner.Then("I have css folder with 3 files in the export folder");
#line 56
 testRunner.And("I have js folder with 3 files in the export folder");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Export as html")]
        [Xunit.TraitAttribute("Description", "Copy static file from root")]
        public virtual void CopyStaticFileFromRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Copy static file from root", new string[] {
                        "export"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have static file \"static.txt\"");
#line 61
 testRunner.When("I export");
#line 62
 testRunner.Then("I have file \"static.txt\" in the export folder");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ExportAsHtmlFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ExportAsHtmlFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
